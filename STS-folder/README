
  STS - Search Tree Sampler
  
  Version 1.0 (March 2012)

=====================================================================
  Copyright, 2013:

  Stefano Ermon     - Cornell University  , ermonste@cs.cornell.edu

  The lastest version of this program is available at
  http://www.cs.cornell.edu/~ermonste

  Please send bug reports and suggestions/improvements to:
  ermonste@cs.cornell.edu
=====================================================================

1. SEARCH TREE SAMPLER (STS)
2. DIRECTORY OVERVIEW:
3. BUILDING
4. USAGE EXAMPLES

================================================================================
STS:

SearchTreeSampler is a sampling technique that, while enforcing an approximately uniform exploration of the search space,
leverages the reasoning power of a systematic constraint solver in a black-box scheme (MiniSAT in this case).
They key idea is to explore the search tree uniformly in a breadth-first way, rather than depth-first, subsampling a subset
of representative nodes at each level. The number of nodes kept at each level is a parameter used to trade off uniformity with
computational complexity.
The samples provided by STS can be used to estimate the number of solutions of the problem by recursively estimate the number of
partial assignments of up to i literals that can be extended to form a solution.

For more details on the algorithm see:

	Stefano Ermon, Carla Gomes, and Bart Selman.
	Uniform Solution Sampling Using a Constraint Solver As an Oracle.
	UAI-12. In Proc. 28th Conference on Uncertainty in Artificial Intelligence, August 2012.

Please reference this paper if you use this code.



================================================================================
DIRECTORY OVERVIEW:

This code is heavily based on the MiniSAT SAT solver (http://minisat.se/). The new portion of the code is mostly in mtl/Main.cc
where the original MiniSAT is repeatedly invoked while exploring the search tree.

mtl/            Mini Template Library
utils/          Generic helper code (I/O, Parsing, CPU-time, etc)
core/           A core version of the solver
simp/           An extended solver with simplification capabilities
test/			Example CNF files
README
LICENSE

================================================================================
BUILDING: (release version: without assertions, statically linked, etc)

export MROOT=<STS-dir>              (or setenv in cshell)
cd core 
make

================================================================================
USAGE EXAMPLES:

Run SearchTreeSampler on a CNF file

./STS <cnf-file>

./STS ../test/t2307.cnf -k=100


